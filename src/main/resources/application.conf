app {
  version = "0.8.0"
  verbose = true
}

akka {
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  #log-config-on-start = on

  # Logging
  #   http://rerun.me/2014/09/29/akka-notes-logging-and-testing/
  #   http://doc.akka.io/docs/akka/current/java/logging.html
  #
  loggers = [ "akka.event.slf4j.Slf4jLogger" ]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO                          # OFF, DEBUG, INFO, WARN, ERROR
  #stdout-loglevel = OFF
  log-dead-letters = OFF
  #io.TcpListener = DEBUG

  http {
    server {
      port = 8888
      host = localhost

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle connection timeouts.
      idle-timeout = 20 minutes

      # The time period within which the TCP binding process must be completed.
      # Set to `infinite` to disable.
      bind-timeout = 1s
      request-timeout = 30s
    }

    client {
      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      idle-timeout = 20 minutes
    }
  }

}  # akka

db {
  kbqdb: {
    url = "jdbc:mysql://localhost:3306/kbqdb"
    driver = com.mysql.jdbc.Driver
    autocommit = true
    connectionPool = disabled
    keepAliveConnection = true
    user = "kbqer"
    password = "kbqpwd"
  }

  sources: {
    KBDirPath: "KBs"                                        // location of KB files for input
    batchSize: 10000                                        // records per writing batch
    maxFieldSize: 64                                        // max allowed size of text
    metaInfo: [                                             // list of KBs and properties
      {
        id: 1, ns: "be", label: "Gene_or_gene_product",
        filename: "BEcomplexes.tsv.gz"
      }
      {
        id: 2, ns: "uniprot", label: "Gene_or_gene_product",
        filename: "uniprot-proteins.tsv.gz"
      }
      {
        id: 3, ns: "be", label: "Family",
        filename: "BEfamilies.tsv.gz"
      }
      {
        id: 4, ns: "pfam", label: "Family",
        filename: "PFAM-families.tsv.gz"
      }
      {
        id: 5, ns: "interpro", label: "Family",
        filename: "ProteinFamilies.tsv.gz"
      }
      {
        id: 6, ns: "uniprot", label: "Cellular_component",
        filename: "uniprot-subcellular-locations.tsv.gz"
      }
      {
        id: 7, ns: "go", label: "Cellular_component",
        filename: "GO-subcellular-locations.tsv.gz"
      }
      {
        id: 8, ns: "pubchem", label: "Simple_chemical",
        filename: "PubChem.tsv.gz"
      }
      {
        id: 9, ns: "pubchem", label: "Simple_chemical",
        filename: "hms-drugs.tsv.gz"
      }
      {
        id: 10, ns: "", label: "BioProcess",                 // multi-source, uni-label
        filename: "bio_process.tsv.gz"
      }
      {
        id: 11, ns: "taxonomy", label: "Species",
        filename: "Species.tsv.gz"
      }
      {
        id: 12, ns: "cellosaurus", label: "CellLine",
        filename: "Cellosaurus.tsv.gz"
      }
      {
        id: 13, ns: "atcc", label: "CellLine",
        filename: "atcc.tsv.gz"
      }
      {
        id: 14, ns: "tissuelist", label: "TissueType",
        filename: "tissue-type.tsv.gz"
      }
      {
        id: 15, ns: "cl", label: "CellType",
        filename: "CellOntology.tsv.gz"
      }
      {
        id: 16, ns: "uberon", label: "Organ",
        filename: "Uberon.tsv.gz"
      }
      {
        id: 100, ns: "", label: "",                         // multi-source, multi-label
        filename: "NER-Grounding-Override.tsv.gz"
      }
    ]
  }

}
